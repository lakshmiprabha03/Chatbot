require('dotenv').config(); // Loads .env file
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
// const OpenAI = require('openai');  // Commented out for free mock mode

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware (handles JSON requests, CORS for frontend)
app.use(cors());
app.use(express.json());

// MongoDB Connection
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('✅ MongoDB Connected to Atlas!'))
  .catch(err => console.error('❌ MongoDB Connection Failed:', err.message));

// OpenAI Setup (Commented out for free testing - uncomment later if adding credits)
// const openai = new OpenAI({
//   apiKey: process.env.OPENAI_API_KEY,
// });

// Test Route: /api/test (Mock AI for free testing)
app.get('/api/test', async (req, res) => {
  try {
    // Mock OpenAI Response (simulate GPT - random for realism)
    const mockResponses = [
      'Hello from the chatbot backend! How can I help today?',
      'This is a free mock response. Your backend is working great!',
      'AI simulation: The weather is sunny. Ask me anything!',
      'Free mode activated: MongoDB connected, ready for chats.',
      'Mock GPT: Say hello in 5 words - Hi, welcome aboard!'
    ];
    const aiResponse = mockResponses[Math.floor(Math.random() * mockResponses.length)];

    // Simple MongoDB query (assumes sample_mflix or chatbotdb exists)
    const db = mongoose.connection.db;
    const collections = await db.listCollections().toArray();
    const dbInfo = `Connected to DB with ${collections.length} collections.`;

    res.json({
      message: 'Backend Server Working! (Free Mock Mode)',
      aiResponse: aiResponse,
      database: dbInfo,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Test Route Error:', error.message);
    res.status(500).json({ error: 'Test failed: ' + error.message });
  }
});

// Basic Route: Root endpoint
app.get('/', (req, res) => {
  res.json({ message: 'Chatbot Platform Backend is Running!' });
});

// Start Server
app.listen(PORT, () => {
  console.log(`🚀 Backend Server running on http://localhost:${PORT}`);
  console.log(`📡 Test it: Visit http://localhost:${PORT}/api/test in your browser`);
});